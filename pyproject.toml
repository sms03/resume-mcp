[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm"]
build-backend = "setuptools.build_meta"

[project]
name = "resume-analysis-mcp-server"
version = "1.0.0"
description = "MCP Server for intelligent resume analysis and candidate selection"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Resume Analysis Team", email = "team@example.com"}
]
keywords = ["resume", "analysis", "mcp", "ai", "google", "nlp", "hiring"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Office/Business :: Human Resources",
    "Topic :: Scientific/Engineering :: Artificial Intelligence"
]
requires-python = ">=3.8"
dependencies = [
    "mcp>=1.0.0",
    "google-cloud-aiplatform>=1.40.0",
    "google-generativeai>=0.3.0",
    "pydantic>=2.0.0",
    "python-dotenv>=1.0.0",
    "PyPDF2>=3.0.0",
    "python-docx>=0.8.11",
    "openpyxl>=3.1.0",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
    "spacy>=3.7.0",
    "nltk>=3.8.1",
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "aiofiles>=23.2.1"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "pytest-cov>=4.1.0",
    "black>=23.7.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "isort>=5.12.0"
]

[project.urls]
Homepage = "https://github.com/your-org/resume-analysis-mcp-server"
Repository = "https://github.com/your-org/resume-analysis-mcp-server.git"
Issues = "https://github.com/your-org/resume-analysis-mcp-server/issues"

[project.scripts]
resume-mcp-server = "main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[tool.black]
line-length = 100
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "venv/*", ".venv/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError"
]
